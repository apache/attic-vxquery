~~ Licensed to the Apache Software Foundation (ASF) under one or more
~~ contributor license agreements.  See the NOTICE file distributed with
~~ this work for additional information regarding copyright ownership.
~~ The ASF licenses this file to You under the Apache License, Version 2.0
~~ (the "License"); you may not use this file except in compliance with
~~ the License.  You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

Contributing Code

  The following steps outline how to submit code to the VXQuery community for inclusion.
  If you have questions about how to get started developing for VXQuery take a look at our Developer 
  {{{http://vxquery.apache.org/developer_get_started.html}Get Started}} Guide.
  VXQuery community supports two methods of contributing code to the project. 
  First, a patch file can be submitted to an open VXQuery issue.
  This method works well for small bug fixes.
  Second, a pull request can be created in github.
  The pull request will allow the community to give the developer feedback and support in creating a quality submission.
  The following steps outline the github pull request process for the VXQuery community.

  * Developer
    
    * Pre-contribution steps to follow.

      * {{{http://vxquery.apache.org/user_get_started.html}Community steps}}.

      * {{{http://vxquery.apache.org/developer_get_started.html}Developer steps}}.
  
      * Create a {{{https://github.com/}github}} account. 

    * Create a github fork of {{{https://github.com/apache/vxquery}Apache VXQuery}} project.
    
      Go to {{{https://github.com/apache/vxquery}Apache VXQuery}} github mirror.
      Create a fork by clicking on the fork button.
      The fork can be cloned to your local machine for development.
      
    * Create a branch for your changes.
    
      VXQuery uses the following convention when creating a branch: authors_username/topic_or_issue
      The following branch name helps keep branches separated and its easy to determine the author and topic. 
      
    * Test your changes.
    
      Once the work has been completed, test your branch against known passing Apache VXQuery tests.
      Your patch must not break any of the existing test suites, either the VXQuery or currently passing XQTS.
      
      * {{{http://vxquery.apache.org/user_running_tests.html} Run the Test Suites}}
      
      * {{{http://vxquery.apache.org/development_update_xqts_results.html}Update Passing Tests}}
  
    * Create a github Pull Request.
    
      Once the work has been tested, a pull request can be created for your branch.
      Please use the Apache VXQuery master as branch to compare your changes.
      The branch should be up-to-date with the lastest Apache VXQuery master branch.
      
    * Post your Pull Request.
    
      Post your Pull Request to the mailing list or issue to allow the VXQuery community to give you feedback.
      At least one other member of the community should review your change.
      If there is any feedback, address this and repeat the posting process.
  
  * VXQuery Reviewer / Committer

    * Review the Pull Request.
    
    * Double check the VXQuery and XQTS tests.
    
    * Merge the change.
   
      When merging the change, do not rebase. 
      Instead do a single merge commit into Apache VXQuery master.
